(ns oc.change.db.migrations.add-follow-publishers-table
  (:require [taoensso.faraday :as far]
            [oc.lib.db.migrations :as m]
            [oc.lib.change.resources.follow :as follow]
            [oc.change.config :as config]
            [oc.change.resources.common :refer (gsi-exists-on-table?)]))

;; NB: The fact that these migrations have been run already does not currently persist, so the up method
;; needs to be idempotent
(defn up [dynamodb-opts]
  ;; Do great things

  ;; Create follow table if not already present
  (println
    (far/ensure-table config/dynamodb-opts
      (follow/table-name config/dynamodb-opts)
      [:user_id :s]
      {:range-keydef [:org_slug :s]
       :billing-mode :pay-per-request
       :block? true}))

  ;; Create org-slug gsi index on follow table if not already present
  (print
   (if (gsi-exists-on-table? config/dynamodb-opts (follow/org-slug-gsi-name config/dynamodb-opts) (follow/table-name config/dynamodb-opts))
     (format "%s index already exists on %s, skipping" (follow/org-slug-gsi-name config/dynamodb-opts) (follow/table-name config/dynamodb-opts))
     @(far/update-table config/dynamodb-opts
        (follow/table-name config/dynamodb-opts)
        {:gsindexes {:operation :create
                     :name (follow/org-slug-gsi-name config/dynamodb-opts)
                     :billing-mode :pay-per-request
                     :hash-keydef [:org_slug :s]
                     :range-keydef [:user_id :s]
                     :projection :keys-only}})))

  ;; Create follower table if not already present
  (println
    (far/ensure-table config/dynamodb-opts
      (follow/follower-table-name config/dynamodb-opts)
      [:publisher_uuid :s]
      {:range-keydef [:org_slug :s]
       :billing-mode :pay-per-request
       :block? true}))

  true) ; return true on success