(ns oc.change.db.migrations.delete-publisher-followers
  (:require [taoensso.faraday :as far]
            [oc.lib.db.migrations :as m]
            [oc.change.config :as config]
            [oc.lib.change.resources.follow :as follow]
            [oc.change.resources.common :refer (gsi-exists-on-table? table-exists?)]))

(defn- ^:deprecated publisher-follower-table-name [db-opts]
  (keyword (str (:table-prefix db-opts) "_publisher_follower")))

(defn- ^:deprecated org-slug-publisher-followers-gsi-name [db-opts]
  (keyword (str (:table-prefix db-opts) "_publisher_follower_gsi_org_slug")))

;; NB: The fact that these migrations have been run already does not currently persist, so the up method
;; needs to be idempotent
(defn up [dynamodb-opts]
  ;; Do great things
  (when (table-exists? dynamodb-opts (publisher-follower-table-name dynamodb-opts))
    (println (far/delete-table dynamodb-opts (publisher-follower-table-name dynamodb-opts))))

  (when (gsi-exists-on-table? config/dynamodb-opts (org-slug-publisher-followers-gsi-name config/dynamodb-opts) (follow/table-name config/dynamodb-opts))
    (println
     @(far/update-table config/dynamodb-opts
                        (follow/table-name config/dynamodb-opts)
                        {:gsindexes {:operation :delete
                                     :name (org-slug-publisher-followers-gsi-name config/dynamodb-opts)}})))

  true) ; return true on success

(comment
  ;; Better to run this manually from the REPL to supervise the execution
  (require '[oc.lib.dynamo.attribute-change :as attribute-change])
  (attribute-change/delete-attribute config/dynamodb-opts follow/table-name "follow_publisher_uuids" {:limit 0 :run? false}))