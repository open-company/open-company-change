(ns oc.change.db.migrations.add-delete-gsindexes
  (:require [taoensso.faraday :as far]
            [oc.lib.db.migrations :as m]
            [oc.change.config :as config]
            [oc.change.resources.read :as read]
            [oc.change.resources.seen :as seen]
            [oc.change.resources.change :as change]
            [oc.change.resources.common :refer (gsi-exists-on-table?)]))

;; NB: The fact that these migrations have been run already does not currently persist, so the up method
;; needs to be idempotent
(defn up [dynamodb-opts]

  (let [seen-container-id-item-id-gsi-exists? (gsi-exists-on-table? dynamodb-opts seen/container-id-item-id-gsi-name seen/table-name)
        read-container-id-item-id-gsi-exists? (gsi-exists-on-table? dynamodb-opts read/container-id-item-id-gsi-name read/table-name)
        change-container-id-item-id-gsi-exists? (gsi-exists-on-table? dynamodb-opts change/container-id-item-id-gsi-name change/table-name)
        seen-container-id-gsi-exists? (gsi-exists-on-table? dynamodb-opts seen/container-id-gsi-name seen/table-name)
        read-container-id-gsi-exists? (gsi-exists-on-table? dynamodb-opts read/container-id-gsi-name read/table-name)]

    (println "")
    (println
      (if seen-container-id-item-id-gsi-exists?
        (format "%s index already exists on %s, skipping" seen/container-id-item-id-gsi-name seen/table-name)
        @(far/update-table dynamodb-opts
          seen/table-name
          {:gsindexes {:operation :create
                       :name seen/container-id-item-id-gsi-name
                       :billing-mode :pay-per-request
                       :hash-keydef [:item-id :s]
                       :range-keydef [:container_id :s]
                       :projection :keys-only}})))

    (println "")
    (println
      (if read-container-id-item-id-gsi-exists?
        (format "%s index already exists on %s, skipping" read/container-id-item-id-gsi-name read/table-name)
        @(far/update-table dynamodb-opts
          read/table-name
          {:gsindexes {:operation :create
                       :name read/container-id-item-id-gsi-name
                       :billing-mode :pay-per-request
                       :hash-keydef [:item_id :s]
                       :range-keydef [:container_id :s]
                       :projection :keys-only}})))

    (println "")
    (println
      (if change-container-id-item-id-gsi-exists?
        (format "%s index already exists on %s, skipping" change/container-id-item-id-gsi-name change/table-name)
        @(far/update-table dynamodb-opts
          change/table-name
          {:gsindexes {:operation :create
                       :name change/container-id-item-id-gsi-name
                       :billing-mode :pay-per-request
                       :hash-keydef [:item_id :s]
                       :range-keydef [:container_id :s]
                       :projection :keys-only}})))

    (when (and (not seen-container-id-item-id-gsi-exists?)
               (not seen-container-id-gsi-exists?))
      (throw (ex-info
              (str
               "Attempting to create a second GSIndex on the " seen/table-name
               " table, since this operation take a while please check that "
               seen/container-id-item-id-gsi-name
               " has been created before you run this migration again.")
               {:index-one seen/container-id-item-id-gsi-name
                :index-two seen/container-id-gsi-name})))

    (println "")
    (println
      (if seen-container-id-gsi-exists?
        (format "%s index already exists on %s, skipping" seen/container-id-gsi-name seen/table-name)
        @(far/update-table dynamodb-opts
          seen/table-name
          {:gsindexes {:operation :create
                       :name seen/container-id-gsi-name
                       :billing-mode :pay-per-request
                       :hash-keydef [:container_id :s]
                       :range-keydef [:user_id :s]
                       :projection :keys-only}})))

    (when (and (not read-container-id-item-id-gsi-exists?)
               (not read-container-id-gsi-exists?))
      (throw (ex-info
              (str
               "Attempting to create a second GSIndex on the " read/table-name
               " table, since this operation take a while please check that "
               read/container-id-item-id-gsi-name
               " has been created before running this migration again.")
               {:index-one seen/container-id-item-id-gsi-name
                :index-two seen/container-id-gsi-name})))

    (println "")
    (println
      (if read-container-id-gsi-exists?
        (format "%s index already exists on %s, skipping" read/container-id-gsi-name read/table-name)
        @(far/update-table dynamodb-opts read/table-name
          {:gsindexes
            {:operation :create
             :name read/container-id-gsi-name
             :billing-mode :pay-per-request
             :hash-keydef [:container_id :s]
             :range-keydef [:user_id :s]
             :projection :keys-only}})))

    true)) ; return true on success